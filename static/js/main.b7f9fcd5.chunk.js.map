{"version":3,"sources":["store/loading.ts","store/message.ts","store/post.ts","store/query.ts","store/loadComplete.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/User.tsx","components/CommentList.tsx","components/PostItem.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setMessage","message","posts","filter","post","id","postsId","map","comments","commentItem","commentId","query","isloadComplete","BASE_URL","preparedPostList","a","Promise","all","fetch","then","json","users","user","find","userId","comment","postId","rootReducer","combineReducers","loadingReducer","messageReducer","postReducer","queryReducer","loadComplete","loadCompleteReducer","isLoading","state","getMessage","getQuery","getIsLoaded","getVisiblePosts","title","body","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","className","onClick","postsFromServer","catch","disabled","User","name","email","address","href","street","suite","city","zipcode","CommentsList","PostItem","key","PostList","App","visiblePosts","isLoadingCompleted","placeholder","value","onChange","event","target","setQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7f9fcd5.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport const setPosts = (posts: PostFromServer[]) => ({ type: SET_POSTS, posts });\nexport const removePost = (postsId: number) => ({ type: REMOVE_POST, postsId });\nexport const removeComment = (postsId: number, commentId: number) => (\n  {\n    type: REMOVE_COMMENT,\n    postsId,\n    commentId,\n  });\n\nconst reducer = (posts: PostFromServer[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case REMOVE_POST:\n      return posts.filter(post => post.id !== action.postsId);\n    case REMOVE_COMMENT:\n      return posts.map(post => ({\n        ...post,\n        comments: post.comments\n          .filter((commentItem: Comment) => commentItem.id !== action.commentId),\n      }));\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst QUERY = 'QUERY';\n\nexport const setQuery = (query: string) => (\n  {\n    type: QUERY,\n    query,\n  });\n\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst LOAD_COMPLETED = 'LOAD_COMPLETE';\n\nexport const setLoadCompleted = () => ({ type: LOAD_COMPLETED });\n\nconst reducer = (isloadComplete = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n    default:\n      return isloadComplete;\n  }\n};\n\nexport default reducer;\n","const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getPosts = () => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(posts => posts.json());\n};\n\nconst getUsers = () => {\n  return fetch(`${BASE_URL}/users`)\n    .then(users => users.json());\n};\n\nconst getComments = () => {\n  return fetch(`${BASE_URL}/comments`)\n    .then(comments => comments.json());\n};\n\nexport const preparedPostList = async () => {\n  const [posts, users, comments] = await Promise.all([\n    getPosts(), getUsers(), getComments(),\n  ]);\n\n  return posts.map((post: Post) => {\n    return {\n      ...post,\n      user: users.find((user: User) => user.id === post.userId),\n      comments: comments.filter((comment: Comment) => comment.postId === post.id),\n    };\n  });\n};\n","import {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n  AnyAction,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport postReducer, { setPosts } from './post';\nimport queryReducer from './query';\nimport loadCompleteReducer, { setLoadCompleted } from './loadComplete';\nimport { preparedPostList } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postReducer,\n  query: queryReducer,\n  loadComplete: loadCompleteReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\nexport const getIsLoaded = (state: RootState) => state.loadComplete;\n\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter((post: Post) => (\n      (post.title + post.body)\n        .toLowerCase()\n        .includes(state.query.toLowerCase())\n    ));\n};\n\nexport const loadPosts = () => {\n\n  return (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n\n    preparedPostList()\n      .then(postsFromServer => {\n        dispatch(finishLoading());\n        dispatch(setMessage('Success'));\n        dispatch(setPosts(postsFromServer));\n        dispatch(setLoadCompleted());\n      })\n      .catch(() => {\n        dispatch(setMessage('Error occurred when loading data'));\n      });\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading } from '../store';\nimport { loadPosts } from './../store/index';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      className=\"btn btn-info\"\n      type=\"button\"\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  user: User;\n};\n\nexport const User: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n    address,\n  } = user;\n\n  return (\n    <div className=\"personalInfo\">\n      <h3 className=\"personalInfo__name\">\n        {name}\n      </h3>\n      <p className=\"personalInfo__email\">\n        <a href={`mailto=${email}`}>\n          {email}\n        </a>\n      </p>\n      <address className=\"personalInfo__address\">\n        <span>\n          {address.street}\n          {address.suite}\n        </span>\n        <span>{address.city}</span>\n        <span>{address.zipcode}</span>\n      </address>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeComment } from '../store/post';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentsList: React.FC<Props> = ({ comment }) => {\n  const {\n    name,\n    body,\n    email,\n    postId,\n  } = comment;\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-warning\"\n        type=\"button\"\n        onClick={() => dispatch(removeComment(postId, comment.id))}\n      >\n        x\n      </button>\n      <h3>\n        {name}\n      </h3>\n      <p>\n        <a href={`mailto:${email}`}>\n          {email}\n        </a>\n      </p>\n      <p>\n        {body}\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { User } from './User';\nimport { CommentsList } from './CommentList';\nimport { removePost } from '../store/post';\n\ntype Props = {\n  post: PostFromServer;\n};\n\nexport const PostItem: React.FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-danger\"\n        type=\"button\"\n        onClick={() => dispatch(removePost(post.id))}\n      >\n        x\n      </button>\n      <h2>{title}</h2>\n      <p>{body}</p>\n\n      <section className=\"post__personalInfo\">\n        <User user={user} />\n      </section>\n      <section className=\"comments\">\n        <ul className=\"comment__list\">\n          {comments.map((comment: Comment) => (\n            <li className=\"comment__item\" key={comment.id}>\n              <CommentsList comment={comment} />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: PostFromServer[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <>\n      <ul className=\"post__list\">\n        {posts.map(post => (\n          <li className=\"post__item\" key={post.id}>\n            <PostItem post={post} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\n\nimport {\n  isLoading,\n  getMessage,\n  getVisiblePosts,\n  getQuery,\n  getIsLoaded,\n} from './store';\nimport { PostList } from './components/PostList';\n\nimport { setQuery } from './store/query';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n  const visiblePosts = useSelector(getVisiblePosts);\n  const query = useSelector(getQuery);\n  const isLoadingCompleted = useSelector(getIsLoaded);\n\n  const handleSearchPhrase = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.target as HTMLInputElement;\n\n    dispatch(setQuery(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n      {isLoadingCompleted\n        ? (\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"form-control mr-sm-2\"\n              placeholder=\"Search\"\n              value={query}\n              onChange={handleSearchPhrase}\n            />\n          </div>\n        )\n        : <Start />}\n      <PostList posts={visiblePosts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}